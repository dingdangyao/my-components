{"remainingRequest":"C:\\Users\\10674\\Documents\\mp\\vue\\my-components\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\10674\\Documents\\mp\\vue\\my-components\\packages\\components\\Magnifier\\Magnifier.vue?vue&type=style&index=0&id=c1898070&lang=scss&scoped=true&","dependencies":[{"path":"C:\\Users\\10674\\Documents\\mp\\vue\\my-components\\packages\\components\\Magnifier\\Magnifier.vue","mtime":1588426048854},{"path":"C:\\Users\\10674\\Documents\\mp\\vue\\my-components\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\10674\\Documents\\mp\\vue\\my-components\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\10674\\Documents\\mp\\vue\\my-components\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\10674\\Documents\\mp\\vue\\my-components\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\10674\\Documents\\mp\\vue\\my-components\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\10674\\Documents\\mp\\vue\\my-components\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoubWFnbmlmaWVyLXdyYXAgewogIHBvc2l0aW9uOiByZWxhdGl2ZTsKICBib3gtc2l6aW5nOiBib3JkZXItYm94OwoKICAuc21hbGwtd3JhcCB7CiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgICB6LWluZGV4OiAxOwogICAgYm9yZGVyOiAxcHggc29saWQgI2NjYzsKICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7CgogICAgLm1hc2std3JhcCB7CiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgICAgY3Vyc29yOiBtb3ZlOwogICAgICBiYWNrZ3JvdW5kOiBSR0JBKDI1NSwgMjU1LCAyNTUsIDAuNSk7CiAgICAgIHotaW5kZXg6IDE7CiAgICB9CiAgfQoKICAubWF4LXdyYXAgewogICAgcG9zaXRpb246IGZpeGVkOwogICAgYm9yZGVyOiAxcHggc29saWQgI2NjYzsKICAgIG92ZXJmbG93OiBoaWRkZW47CiAgICBiYWNrZ3JvdW5kOiAjZmZmOwoKICAgIC5pbWcgewogICAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICB9CiAgfQp9Cg=="},{"version":3,"sources":["Magnifier.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmLA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"Magnifier.vue","sourceRoot":"packages/components/Magnifier","sourcesContent":["<template>\n  <div>\n    <div class=\"magnifier-wrap\" ref=\"wrap\">\n      <div\n        class=\"small-wrap\"\n        ref=\"small\"\n        @mouseleave=\"onMouseleave\"\n        @mousemove=\"onMousemove\"\n        @mouseenter=\"onMouseenter\"\n      >\n        <div class=\"mask-wrap\" ref=\"mask\" v-show=\"isShow\"></div>\n        <img :src=\"minImgUrl\" :width=\"boxSize\" :height=\"boxSize\" />\n      </div>\n      <div class=\"max-wrap\" ref=\"maxBox\" v-show=\"isShow\">\n        <img\n          :src=\"maxImgUrl\"\n          :style=\"{ width: maxImgWidth + 'px', height: maxImgHeight + 'px' }\"\n          class=\"img\"\n          ref=\"img\"\n          @load=\"setMaskSize\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"magnifier\",\n  props: {\n    boxSize: {\n      type: Number,\n      default: 500\n    },\n    minImgUrl: {\n      type: String,\n      default: \"\"\n    },\n    maxImgUrl: {\n      type: String,\n      default: \"\"\n    },\n    autoReverse: {\n      type: Boolean,\n      default: true\n    },\n    direction: {\n      type: String,\n      default: \"right\"\n    }\n  },\n  data() {\n    return {\n      isShow: false,\n      maxImgWidth: \"\",\n      maxImgHeight: \"\"\n    };\n  },\n  methods: {\n    setMaskSize(e) {\n      this.isLoad = true;\n      this.maxImgWidth = e.target.width;\n      this.maxImgHeight = e.target.height;\n      this.$refs[\"img\"].width = e.target.width;\n      this.$refs[\"img\"].height = e.target.height;\n      this.$nextTick(() => {\n        this.initDom();\n      });\n    },\n    initDom() {\n      this.wrap = this.$refs[\"wrap\"];\n      this.maxBox = this.$refs[\"maxBox\"];\n      this.mask = this.$refs[\"mask\"];\n      this.maxImg = this.$refs[\"img\"];\n      this.small = this.$refs[\"small\"];\n      this.smallWidth = this.getDomAttr(this.small, \"width\");\n      this.smallHeight = this.getDomAttr(this.small, \"height\");\n      this.maxBox.style.width = this.boxSize + \"px\";\n      this.maxBox.style.height = this.boxSize + \"px\";\n    },\n    getDomAttr(el, attr) {\n      return parseInt(getComputedStyle(el)[attr].slice(0, -2));\n    },\n    onMouseenter() {\n      this.isShow = true;\n    },\n    onMouseleave() {\n      this.isShow = false;\n    },\n    onMousemove(e) {\n      if (!this.wrap || !this.isLoad) return;\n\n      const mask = this.$refs[\"mask\"];\n      const maxImgWidth = this.$refs[\"img\"].width;\n      const minBoxWidth = this.smallWidth;\n      mask.style.width = minBoxWidth * (minBoxWidth / maxImgWidth) + \"px\";\n      mask.style.height = minBoxWidth * (minBoxWidth / maxImgWidth) + \"px\";\n\n      const leftPosition = this.wrap.getBoundingClientRect().left;\n      const topPosition = this.wrap.getBoundingClientRect().top;\n      const paddingLeft = this.getDomAttr(this.wrap, \"padding-left\");\n      const padddingTop = this.getDomAttr(this.wrap, \"padding-top\");\n\n      let left = e.clientX - leftPosition - this.mask.offsetWidth / 2;\n      let top = e.clientY - topPosition - this.mask.offsetHeight / 2;\n\n      const maxBoxRightPos =\n        leftPosition +\n        this.maxBox.clientLeft +\n        this.small.clientLeft +\n        this.wrap.clientLeft +\n        paddingLeft +\n        this.small.clientWidth;\n\n      const maxBoxLeftPos =\n        leftPosition +\n        this.wrap.clientLeft +\n        paddingLeft -\n        this.small.clientLeft * 2 -\n        this.small.clientWidth;\n\n      let maxBoxPos = -1;\n\n      if (this.autoReverse) {\n        const isMaxBoxExceedWindow =\n          maxBoxRightPos + this.getDomAttr(this.maxBox, \"width\") >\n          window.innerWidth;\n        maxBoxPos = isMaxBoxExceedWindow ? maxBoxLeftPos : maxBoxRightPos;\n      } else {\n        if (this.direction === \"right\") {\n          maxBoxPos = maxBoxRightPos;\n        } else if (this.direction === \"left\") {\n          maxBoxPos = maxBoxLeftPos;\n        }\n      }\n      this.maxBox.style.left = maxBoxPos + \"px\";\n\n      this.maxBox.style.top =\n        topPosition +\n        this.wrap.clientTop -\n        this.maxBox.clientTop +\n        padddingTop +\n        this.small.clientTop +\n        \"px\";\n\n      if (left < paddingLeft) {\n        left = paddingLeft;\n      } else if (\n        left >\n        this.small.offsetWidth - this.mask.offsetWidth + paddingLeft\n      ) {\n        left = this.small.offsetWidth - this.mask.offsetWidth + paddingLeft;\n      }\n\n      if (top < padddingTop) {\n        top = padddingTop;\n      } else if (\n        top >\n        this.small.offsetHeight - this.mask.offsetHeight + padddingTop\n      ) {\n        top = this.small.offsetHeight - this.mask.offsetHeight + padddingTop;\n      }\n\n      this.mask.style.left = left + \"px\";\n      this.mask.style.top = top + \"px\";\n      const pX =\n        (left - paddingLeft) / (this.smallWidth - this.mask.offsetWidth);\n      const pY =\n        (top - padddingTop) / (this.smallHeight - this.mask.offsetHeight);\n      this.maxImg.style.left =\n        -pX * (this.maxImg.width - this.maxBox.offsetWidth) + \"px\";\n      this.maxImg.style.top =\n        -pY * (this.maxImg.height - this.maxBox.offsetHeight) + \"px\";\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.magnifier-wrap {\n  position: relative;\n  box-sizing: border-box;\n\n  .small-wrap {\n    display: inline-block;\n    z-index: 1;\n    border: 1px solid #ccc;\n    box-sizing: border-box;\n\n    .mask-wrap {\n      position: absolute;\n      cursor: move;\n      background: RGBA(255, 255, 255, 0.5);\n      z-index: 1;\n    }\n  }\n\n  .max-wrap {\n    position: fixed;\n    border: 1px solid #ccc;\n    overflow: hidden;\n    background: #fff;\n\n    .img {\n      position: absolute;\n    }\n  }\n}\n</style>\n"]}]}